Check good plan_hash_value for an SQL - 

1. WITH
p AS (
SELECT plan_hash_value
  FROM gv$sql_plan
WHERE sql_id = TRIM('&&sql_id.')
   AND other_xml IS NOT NULL
UNION
SELECT plan_hash_value
  FROM dba_hist_sql_plan
WHERE sql_id = TRIM('&&sql_id.')
   AND other_xml IS NOT NULL ),
m AS (
SELECT plan_hash_value,
       SUM(elapsed_time)/SUM(executions) avg_et_secs
  FROM gv$sql
WHERE sql_id = TRIM('&&sql_id.')
   AND executions > 0
GROUP BY
       plan_hash_value ),
a AS (
SELECT plan_hash_value,
       SUM(elapsed_time_total)/SUM(executions_total) avg_et_secs
  FROM dba_hist_sqlstat
WHERE sql_id = TRIM('&&sql_id.')
   AND executions_total > 0
GROUP BY
       plan_hash_value )
SELECT p.plan_hash_value,
       ROUND(NVL(m.avg_et_secs, a.avg_et_secs)/1e6, 3) avg_et_secs
  FROM p, m, a
WHERE p.plan_hash_value = m.plan_hash_value(+)
   AND p.plan_hash_value = a.plan_hash_value(+)
ORDER BY
       avg_et_secs NULLS LAST;
       
2. select  PARSING_SCHEMA_NAME, inst_id, sql_id, child_number, plan_hash_value plan_hash, executions execs,
(elapsed_time/1000000)/decode(nvl(executions,0),0,1,executions) avg_etime_secs,
buffer_gets/decode(nvl(executions,0),0,1,executions) avg_lio,
last_active_time,
SQL_PROFILE,
decode(IO_CELL_OFFLOAD_ELIGIBLE_BYTES,0,'No','Yes') Offload,
decode(IO_CELL_OFFLOAD_ELIGIBLE_BYTES,0,0,100*(IO_CELL_OFFLOAD_ELIGIBLE_BYTES-IO_INTERCONNECT_BYTES)
/decode(IO_CELL_OFFLOAD_ELIGIBLE_BYTES,0,1,IO_CELL_OFFLOAD_ELIGIBLE_BYTES)) "IO_SAVED_%"
from gv$sql s
where   sql_id like nvl(trim('&sql_id'),sql_id)
order by 1, 2, 3;


DB WAITS - 
----------
set lines 500 pages 200
select * from (
  select count(*), ROUND((RATIO_TO_REPORT(COUNT(*)) over())*100, 2) PCT, nvl(event, 'on cpu') event,inst_id from gv$active_session_history where sample_time >sysdate -5/(24*60) group by nvl(event, 'on cpu'),inst_id order by count(*) desc
)
where rownum<15;


TOP SQL WITH WAITS - 
--------------------
select * from (select sql_id,event,count(*) from dba_hist_active_sess_history 
where sample_time between to_date('12-06-2022 08:00:00','dd-mm-yyyy hh24:mi:ss')
and to_date('12-06-2022 08:19:00','dd-mm-yyyy hh24:mi:ss') group by sql_id,event order by 3 desc) where rownum<=20;


TOP SQL WITH WAITS FOR LAST 1 HOUR - 
-----------------------------------
select * from (select sql_id,event,count(*) from dba_hist_active_sess_history 
where sample_time > sysdate - 1/24 group by sql_id,event order by 3 desc) where rownum<=20;

BLOCKING SESSION DETAILS -
------------------------
select * from (
select sql_id,event,blocking_session,BLOCKING_SESSION_SERIAL#,count(*) from dba_hist_active_sess_history 
where sample_time between to_date('25-06-2022 02:24:00','dd-mm-yyyy hh24:mi:ss')
and to_date('25-06-2022 02:24:00','dd-mm-yyyy hh24:mi:ss') and BLOCKING_SESSION_SERIAL# is not null 
group by sql_id,event,blocking_session,BLOCKING_SESSION_SERIAL# order by 5 desc) where rownum<=20;

CURRENT BLOCKERS - 
-------------------
set lines 500
select * from 
(
select count(1),FINAL_BLOCKING_SESSION||':'||FINAL_BLOCKING_INSTANCE from gv$session where FINAL_BLOCKING_SESSION_STATUS='VALID' group by FINAL_BLOCKING_SESSION||':'||FINAL_BLOCKING_INSTANCE  order by 1 desc) 
where rownum<=10;


BLOCKING SESSION DETAILS FOR LAST 15 MINS - 
------------------------------------------
select * from (
select sql_id,event,blocking_session,BLOCKING_SESSION_SERIAL#,count(*) from gv$active_session_history
where sample_time >= sysdate - 15/(24*60) and BLOCKING_SESSION_SERIAL# is not null 
group by sql_id,event,blocking_session,BLOCKING_SESSION_SERIAL# order by 5 desc) where rownum<=20;

select * from (
select sql_id,event,blocking_session,BLOCKING_SESSION_SERIAL#,count(*) from dba_hist_active_sess_history 
where sample_time >= sysdate - 15/(24*60) and BLOCKING_SESSION_SERIAL# is not null 
group by sql_id,event,blocking_session,BLOCKING_SESSION_SERIAL# order by 5 desc) where rownum<=20;


WAITS ON CURRENT OBJECTS - 
-------------------------
select * 
from 
(select MIN(SAMPLE_TIME), MAX(SAMPLE_TIME),SQL_ID,EVENT,CURRENT_OBJ#,COUNT(DISTINCT SESSION_ID),COUNT(1)
  from DBA_HIST_ACTIVE_SESS_HISTORY 
 where sample_time between to_date('10-06-2022 04:00:00','dd-mm-yyyy hh24:mi:ss') and to_date('10-06-2022 04:10:00','dd-mm-yyyy hh24:mi:ss')
   --and EVENT='gc transaction table'
 group by SQL_ID,EVENT,CURRENT_OBJ#
 order by COUNT(1) desc)
 where rownum <=20;
 
 
 HANG  CHAIN FROM DATABASE - 
 --------------------------
 
 set lines 1000 pages 200 
col P1_P2 for a40
col "'CHAIN'||CHAIN_ID||'-'||CHAIN_SIGNATURE" for a70
col SESS_INFO for a20
col BLOCKER for a20
select 'Chain '||CHAIN_ID||'-'||CHAIN_SIGNATURE, 
       INSTANCE||'-'||SID||'-'||SESS_SERIAL# SESS_INFO,	
       BLOCKER_INSTANCE||'-'||BLOCKER_SID||'-'||BLOCKER_SESS_SERIAL# Blocker,
       'FILE#='||P1||' '||'Block#='||P2  "P1_P2",
       IN_WAIT_SECS,TIME_REMAINING_SECS
 from v$wait_chains 
where IN_WAIT_SECS is not null  
and BLOCKER_INSTANCE||'-'||BLOCKER_SID||'-'||BLOCKER_SESS_SERIAL# <> '--' 
order by IN_WAIT_SECS desc;


http://kundun-oracle.blogspot.com/2015/11/blocking-wait-chains.html

set line 500 pages 200
col blkr_sid for a8
col blkr_ser for a8
col wait_event for a35
col FBLOCKER_PROC for a20

SELECT  wc.chain_id, wc.sid, wc.sess_serial#, i.inst_id,
decode(blocker_sid,null,'',blocker_sid) blkr_sid,
decode(BLOCKER_SESS_SERIAL#,null,'',BLOCKER_SESS_SERIAL#) blkr_ser,
blocker_instance blkr_inst,
'SID-'||decode(s.final_blocking_session,null,'<>', s.final_blocking_session)
 ||'-Inst# '||decode(s.final_blocking_instance,null,'<>', s.final_blocking_instance) FBLOCKER_PROC,
wait_event_text wait_event,
in_wait_secs Seconds
FROM v$wait_chains wc,
 gv$session s,
 gv$session bs,
 gv$instance i,
 gv$process p
WHERE wc.instance = i.instance_number (+)
 AND (wc.instance = s.inst_id (+) and wc.sid = s.sid (+)
 AND wc.sess_serial# = s.serial# (+))
 AND (s.final_blocking_instance = bs.inst_id (+) and s.final_blocking_session = bs.sid (+))
 AND (bs.inst_id = p.inst_id (+) and bs.paddr = p.addr (+))
 AND ( num_waiters > 0
 OR ( blocker_osid IS NOT NULL AND in_wait_secs > 10 ) )
CONNECT BY PRIOR wc.sid = blocker_sid
           AND PRIOR wc.sess_serial# = blocker_sess_serial#
           AND PRIOR i.inst_id = blocker_instance
START WITH blocker_is_valid = 'FALSE'
order by in_wait_secs desc ; 
 


FIND OUT THE HIDDEN PARAMETER VALUES - 
--------------------------------------
col NAME for a40
col CURRENT_VALUE for a30
col DEFAULT_VALUE for a30
col DEFAULT_T_F for a30
set linesize 200

SELECT
ksppinm   name,
ksppstvl  Current_Value,
b.ksppstdfl Default_Value,
b.ksppstdf  Default_T_F
FROM
x$ksppi a,
x$ksppsv b
WHERE
a.indx=b.indx
AND
substr(ksppinm,1,1) = '_'
AND
ksppinm like '%_lm_idle_connection_check_interval%';--'%_complex_view_merging%'--'%_replace_virtual_columns%'--'%cost_based%';
--'%_gc_persistent_read_mostly%' --'%_lm_drm_disable%' --'%enable_pdb_close_abort%' --'%undo_autotune%'


set lines 200 pages 300
col File#:Block# for a20
col sid_ser_instid for a15
col status for a8
col state for a8
col con_id for 9
select sql_id,sid||','||serial#||',@'||inst_id "sid_ser_instid" ,p1||':'||p2 "File#:Block#",round(WAIT_TIME_MICRO/1e6,6) wait_seconds,status,state,final_blocking_session from gv$session where event in ('gc current request') order by 4;

select sql_id,sid||','||serial#||',@'||inst_id "sid_ser_instid" ,p1||':'||p2 "File#:Block#",round(WAIT_TIME_MICRO/1e6,6) wait_seconds,status,state,final_blocking_session from gv$session where event in ('gc buffer busy acquire') order by 4;

select sql_id,sid||','||serial#||',@'||inst_id "sid_ser_instid" ,p1||':'||p2 "File#:Block#",round(WAIT_TIME_MICRO/1e6,6) wait_seconds,status,state,final_blocking_session from gv$session where event in ('gc cr block remote read') order by 4;

SQL> select sql_id,sid||','||serial#||',@'||inst_id "sid_ser_instid" ,p1||':'||p2 "File#:Block#",round(WAIT_TIME_MICRO/1e6,6) wait_seconds,status,state, final_blocking_session from gv$session where event in ('gc cr request') order by 4;

SQL> select sql_id,sid||','||serial#||',@'||inst_id "sid_ser_instid" ,p1||':'||p2 "File#:Block#",round(WAIT_TIME_MICRO/1e6,6) wait_seconds,status,state, final_blocking_session from gv$session where event in ('library cache lock') order by 4;

SQL> select sql_id,sid||','||serial#||',@'||inst_id "sid_ser_instid" ,p1||':'||p2 "File#:Block#",round(WAIT_TIME_MICRO/1e6,6) wait_seconds,status,state, final_blocking_session from gv$session where event in ('latch: MGA shared context latch') order by 4;


FIND THE BLOCKING SESSIONS AND BLOCKERS  - 

1.set lines 500
select count(1),FINAL_BLOCKING_SESSION||':'||FINAL_BLOCKING_INSTANCE from gv$session where FINAL_BLOCKING_SESSION_STATUS='VALID' group by FINAL_BLOCKING_SESSION||':'||FINAL_BLOCKING_INSTANCE ;

2.select sid,WAIT_EVENT,BLOCKER_INSTANCE_ID,BLOCKER_SID,BLOCKER_SESS_SERIAL#,inst_id from gv$session_blockers;

3.set lines 1000
col MODULE for a50
col USERNAME for a40
select username,sql_id,module,program from gv$session where sid=<SID>;

FOR RAC ENVIRONMENT - 

SELECT gvh.SID     sessid
    , gvs.serial# serial
    , gvh.inst_id inst_id
    , holder.username holder
    , waiter.username waiter
	, waiter.sql_id "waiter_SQL"
	,holder.sql_id "holder_SQL"
FROM gv$lock    gvh
  , gv$lock    gvw
  , gv$session gvs
  , gv$session holder
  , gv$session waiter
WHERE (gvh.id1, gvh.id2) IN
     (-- Lock mode in which the process requests the lock
      SELECT id1, id2 FROM gv$lock WHERE request = 0  
      INTERSECT
      -- Lock mode in which the session holds the lock
      SELECT id1, id2 FROM gv$lock WHERE lmode = 0    
   )
AND gvh.id1 = gvw.id1
AND gvh.id2 = gvw.id2
AND gvh.request = 0
AND gvw.lmode = 0
AND gvh.SID = gvs.SID
AND gvh.inst_id = gvs.inst_id
and ( holder.sid = gvh.sid and holder.inst_id = gvh.inst_id )
and ( waiter.sid = gvw.sid and waiter.inst_id = gvw.inst_id )
/


FIND OSPID FROM SID -  

1. Set lines 200
col sid format 99999
col username format a15
col osuser format a15
select a.sid, a.serial#,a.username, a.osuser, b.spid
from v$session a, v$process b
where a.paddr= b.addr
and a.sid=<SID>
order by a.sid;
